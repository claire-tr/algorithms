# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution(object):
    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head:
            return head
        return self.merge_sort(head)

    def merge(self, head1, head2):
        p_head = ListNode(0)
        pre_head = p_head
        while head1 and head2:
            if head1.val <= head2.val:
                p_head.next = head1
                head1 = head1.next
                p_head = p_head.next
            else:
                p_head.next = head2
                head2 = head2.next
                p_head = p_head.next
        if head2:
            p_head.next = head2
        if head1:
            p_head.next = head1
        return pre_head.next

    def merge_sort(self, head):
        if not head.next:
            return head
        head1 = head
        head2 = head
        pre_head = head
        while head2 and head2.next:
            pre_head = head1
            head1 = head1.next
            head2 = head2.next
            head2 = head2.next
        pre_head.next = None
        head = self.merge_sort(head)
        head1 = self.merge_sort(head1)
        return self.merge(head, head1)
